# -*- coding: utf-8 -*-
"""Kaggle Loan Data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_KZMLM3UAVd5ImpzfIzj7Okks8O_75jV
"""

import pandas as pd
url="https://raw.githubusercontent.com/RecordK/Python_project/master/Kaggle%20Loan%20data/Loan%20payments%20data.csv"
loan=pd.read_csv(url)

# 파일을 읽고 행갯수와 칼럼별 타입을 출력하세요
loan.info()



"""변수명 해석(의미)

Loan_ID 대출한 고객의 고유한 ID

loan_status 이번 분석의 타겟 변수, 상환 여부를 나타냄

*  PAIDOFF : 기한 내에 대출금 모두 상환

*  COLLECTION : Data 수집 당시까지 미납(연체)

*  COLLECTION_PAIDOFF : 기한은 지났지만 대출금 모두 상환


Principal 고객이 대출받은 금액

terms 대출금 지급까지 걸린 기간

effective_date  실제 계약 효과가 발휘하기 시작한 날짜
* Month/Date/Year 형태
due_date 대출금 납부 기한 날짜

paid_off_time 고객이 은행에 모두 상환한 날짜, 시간
* Month/Date/Year Hour:Minute 형태로 되어있다.
past_due_days  고객이 은행에 대출금을 모두 상환하는데 걸린 기간

age 고객의 나이

education 고객의 교육 수준
* High School or Below : 고졸
* college : 대졸
* Bechalor : 석사
* Master or Above : 박사 이상

Gender 고객의 성별
* male : 남성
* female : 여성
"""

# 칼럼별 결측치를 확인하세요
loan.isna().sum()

# 칼럼별 값 분포를 확인하세요. 문자열은 빈도수, 수치형은 describe()
loan.describe()

# 칼럼별 값 분포를 확인하세요. 문자열은 빈도수, 수치형은 describe()
loan.describe(include='object')

loan['loan_status'].value_counts()

loan["education"].value_counts()

loan["Gender"].value_counts()

# 대출금 상환에 성공한 고객과 실패한 고객수를 출력
# loan_status => PAIDOFF, COLLECTION_PAIDOFF=> 1, COLLECTION=>0
import numpy as np

# PAIDOFF있으면 1,없으면 0
loan["loan_status_yn"] = np.where( loan["loan_status"].str.contains("PAIDOFF") , 1, 0 ) 
loan["loan_status_yn"]
loan["loan_status_yn2"] = np.where( loan["loan_status"].str.contains("PAIDOFF") , 1, 0 )

# 대출금 상환에 성공한 고객과 실패한 고객수를 바그래프로 출력
loan.pivot_table(
    index='loan_status_yn',
    values='age',
    aggfunc='count'
).plot.bar()

# 성별 상환율을 출력
loan.pivot_table(
    index='Gender',
    values='loan_status_yn',
    aggfunc=['count','sum','mean']
)
# 성별 상환율을 출력
a=loan.pivot_table(
    index='Gender',
    values='loan_status_yn',
)

# 성별 상환율을 바그래프로 출력
a.plot.bar()

# 학력별 상환율을 출력
b=loan.pivot_table(
    index='education',
    values='loan_status_yn'
)
b

# 학력별 상환율을 바그래프로 출력
b.plot.bar()

# 대출금의 분포를 히스트그램으로 출력
loan['Principal'].plot.hist()

# 대출금별로 상환에 성공한 고객들과 실패한 고객들의 빈도수와 비율을 출력
loan["loan_status_yn2"] = np.where( loan["loan_status"].str.contains("PAIDOFF") , 1, 0 ) 
c=loan.pivot_table(
    index='Principal',
    columns='loan_status_yn',
    values='age',
    aggfunc='count'
)
c.plot.bar()
d=loan.pivot_table(
    index='Principal',
    values='loan_status_yn',
    aggfunc='mean'
)
d

# 대출금별로 상환에 성공한 고객들과 실패한 고객들의 빈도수와 비율을 시각화하세요
c.plot.bar()
d.plot.bar()

d.plot.pie(subplots=True)

# 고객이 은행과 계약한 이후에 대출금을 지급받기까지 걸린 시간을 히스토그램으로 출력
# effective_date 실제 계약 효과가 발휘하기 시작한 날짜
# Month/Date/Year 형태 due_date 대출금 납부 기한 날짜
# terms 대출금 지급까지 걸린 기간
loan.terms.plot.hist()

# 고객이 은행과 계약한 이후에 대출금을 지급받기까지 걸린 시간(term)별 상환 여부 빈도수 출력
e=loan.pivot_table(
    index='loan_status_yn',
    columns='terms',
    values='age',
    aggfunc='count'
).fillna(0)
e

# 고객이 은행과 계약한 이후에 대출금을 지급받기까지 걸린 시간(term)별 상환 여부 빈도수 막대그래프 출력
e.plot.bar()

# 고객이 은행으로부터 대출금을 지급받아서 계약 효력이 발생한 날짜별(effective_date) 빈도수 출력
loan.pivot_table(
    index='effective_date',
    values='age',
    aggfunc='count'
)

# 고객이 은행으로부터 대출금을 지급받아서 계약 효력이 발생한 날짜별(effective_date) 상환 여부 빈도수 막대그래프 출력
loan.pivot_table(
    index='effective_date',
    columns='loan_status_yn',
    values='age',
    aggfunc='count'
).plot.bar()

# effective_date의 요일별 빈도수 출력
week=['월','화','수','목','금','토','일']
exec_dt = pd.to_datetime( loan['effective_date'] ) # exec_dt를 Timestamp타입 시리즈로 변환
exec_dt_week = exec_dt.dt.day_of_week # Timestamp타입 시리즈에서 요일값(숫자) 추출
wk_list = [ week[wk] for wk in exec_dt_week  ] #요일값(숫자)를 요일문자로 변환
loan['exec_week']  = wk_list # 요일문자 리스트를 exec_week칼럼에 저장
loan.pivot_table(
    index='exec_week',
    values='age',
    aggfunc='count'
).reindex(index=week)

# effective_date의 요일별 상환 여부별 빈도수 출력
loan.pivot_table(
    index='exec_week',
    columns='loan_status_yn',
    values='age',
    aggfunc='count'
).fillna(0).reindex(index=week)

# 대출금을 모두 상환하기로 계약한 날짜(due_date)별 빈도수
loan.pivot_table(
    index='due_date',
    values='age',
    aggfunc='count'
)

# 대출금을 모두 상환하기로 계약한 날짜(due_date)별 상환여부별 빈도수와 바그래프 출력
f=loan.pivot_table(
    index='due_date',
    columns='loan_status_yn',
    values='age',
    aggfunc='count'
).fillna(0)
f
f.plot.bar()

#제출
# 고객이 은행과 계약한 이후에 대출금을 지급받기까지 걸린 시간을 히스토그램으로 출력
# effective_date 실제 계약 효과가 발휘하기 시작한 날짜
# Month/Date/Year 형태 due_date 대출금 납부 기한 날짜
# terms 대출금 지급까지 걸린 기간
loan.terms.plot.hist()
# 고객이 은행과 계약한 이후에 대출금을 지급받기까지 걸린 시간(term)별 상환 여부 빈도수 출력
e=loan.pivot_table(
    index='loan_status_yn',
    columns='terms',
    values='age',
    aggfunc='count'
).fillna(0)
e
# 고객이 은행과 계약한 이후에 대출금을 지급받기까지 걸린 시간(term)별 상환 여부 빈도수 막대그래프 출력
e.plot.bar()
# 고객이 은행으로부터 대출금을 지급받아서 계약 효력이 발생한 날짜별(effective_date) 빈도수 출력
loan.pivot_table(
    index='effective_date',
    values='age',
    aggfunc='count'
)
# 고객이 은행으로부터 대출금을 지급받아서 계약 효력이 발생한 날짜별(effective_date) 상환 여부 빈도수 막대그래프 출력
loan.pivot_table(
    index='effective_date',
    columns='loan_status_yn',
    values='age',
    aggfunc='count'
).plot.bar()
# effective_date의 요일별 빈도수 출력
week=['월','화','수','목','금','토','일']
exec_dt = pd.to_datetime( loan['effective_date'] ) # exec_dt를 Timestamp타입 시리즈로 변환
exec_dt_week = exec_dt.dt.day_of_week # Timestamp타입 시리즈에서 요일값(숫자) 추출
wk_list = [ week[wk] for wk in exec_dt_week  ] #요일값(숫자)를 요일문자로 변환
loan['exec_week']  = wk_list # 요일문자 리스트를 exec_week칼럼에 저장
loan.pivot_table(
    index='exec_week',
    values='age',
    aggfunc='count'
).reindex(index=week)
# effective_date의 요일별 상환 여부별 빈도수 출력
loan.pivot_table(
    index='exec_week',
    columns='loan_status_yn',
    values='age',
    aggfunc='count'
).fillna(0).reindex(index=week)
# 대출금을 모두 상환하기로 계약한 날짜(due_date)별 빈도수
loan.pivot_table(
    index='due_date',
    values='age',
    aggfunc='count'
)
# 대출금을 모두 상환하기로 계약한 날짜(due_date)별 상환여부별 빈도수와 바그래프 출력
f=loan.pivot_table(
    index='due_date',
    columns='loan_status_yn',
    values='age',
    aggfunc='count'
).fillna(0)
f
f.plot.bar()

loan.info()

