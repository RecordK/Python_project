# -*- coding: utf-8 -*-
"""COVID19

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1roiax_Y_6p3Tt_W0JcyeaFhWvCz5_qzP

#설치
"""

from google.colab import output
!pip install chart_studio
!pip install pyecharts
!pip install echarts-themes-pypkg
!pip install selenium
!pip install xmltodict
!pip install snapshot-selenium
!apt-get update
!apt install chromium-chromedriver
output.clear()

"""# 임포트"""

import requests
import xmltodict
import pandas as pd
from pandas import Series
# from pyecharts.globals import CurrentConfig, NotebookType
# from pyecharts.render import make_snapshot
# CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_LAB
import snapshot_selenium.snapshot as driver
from selenium import webdriver
from urllib.request import urlopen
from urllib.parse import quote_plus
from selenium.webdriver.common.keys import Keys
import numpy as np
from datetime import date
import copy, json
import chart_studio
chart_studio.tools.set_credentials_file(username='username', api_key='api_key')
from IPython.display import IFrame
import chart_studio.plotly as py
import plotly.express as px
import plotly.offline as pyo
import plotly.graph_objs as go
import plotly.graph_objects as go
import plotly.io as pio
from pyecharts.globals import ThemeType
from pyecharts.commons.utils import JsCode
from pyecharts.charts import Bar, Bar3D, Grid, Line, Liquid, Page, Pie, Timeline, Tab, Map, Grid
from pyecharts import options as opts

"""#api 부분"""

serviceKey='zTa2HPaDXF3mBGgFN1l0EkCP%2BOWRPIUmkAoGZeu8oQDco%2FUapbW7xPoDPCHaRGPP9A43rMTBBnljgtcas9rZxA%3D%3D'
pageNo='1'
numOfRows='10'
startCreateDt='20200101'
endCreateDt='20201231'
url ='http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson'
url=url+'?serviceKey='+serviceKey+"&pageNo="+pageNo+"&numOfRows=" +numOfRows+ "&startCreateDt="+startCreateDt + "&endCreateDt=" + endCreateDt
req=requests.get(url).text
xmlObject=xmltodict.parse(req)
dict_data=xmlObject['response']['body']['items']['item']
df=pd.DataFrame(dict_data)
df=df.drop(['accExamCnt','updateDt','accDefRate'],axis=1)
df = df.astype({'decideCnt' : 'int', 'deathCnt' : 'int'})
df = df.drop_duplicates(['stateDt']) #중복 일자 제거
df['날짜']=df['stateDt']
df['날짜'] = pd.to_datetime(df['날짜']) #날짜
df['날짜'] = df['날짜'].apply(lambda x:x.strftime('%m-%d'))
df_2 = df[['날짜','decideCnt','deathCnt']]
df_2 = df_2.sort_values(by='날짜') #날짜정렬
df_2['하루확진자'] = df_2['decideCnt'].diff()
df_2['하루사망자'] = df_2['deathCnt'].diff()
df_2=df_2.fillna(0)
df_2020=df_2.astype({'하루확진자' : 'int'})
df_2020=df_2020.astype({'하루사망자' : 'int'})
df_2020.columns=['날짜','확진자','사망자','하루확진자','하루사망자']
df_2020.index=df_2020['날짜']
df_2020=df_2020.drop('날짜',axis=1)

startCreateDt='20210101'
endCreateDt='20211231'
url ='http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson'
url=url+'?serviceKey='+serviceKey+"&pageNo="+pageNo+"&numOfRows=" +numOfRows+ "&startCreateDt="+startCreateDt + "&endCreateDt=" + endCreateDt
req=requests.get(url).text
xmlObject=xmltodict.parse(req)
dict_data=xmlObject['response']['body']['items']['item']
df2=pd.DataFrame(dict_data)
df2=df2.drop(['accExamCnt','updateDt','accDefRate'],axis=1)
df2 = df2.astype({'decideCnt' : 'int', 'deathCnt' : 'int'})
df2 = df2.drop_duplicates(['stateDt']) #중복 일자 제거
df2['날짜']=df2['stateDt']
df2['날짜'] = pd.to_datetime(df2['날짜']) #날짜
df2['날짜'] = df2['날짜'].apply(lambda x:x.strftime('%m-%d'))
df_22 = df2[['날짜','decideCnt','deathCnt']]
df_22 = df_22.sort_values(by='날짜') #날짜정렬
df_22['하루확진자'] = df_22['decideCnt'].diff()
df_22['하루사망자'] = df_22['deathCnt'].diff()
df_22=df_22.fillna(0)
df_2021=df_22.astype({'하루확진자' : 'int'})
df_2021=df_2021.astype({'하루사망자' : 'int'})
df_2021.columns=['날짜','확진자','사망자','하루확진자','하루사망자']
df_2021.index=df_2021['날짜']
df_2021=df_2021.drop('날짜',axis=1)
df_2021.iloc[0][2]=df_2021.iloc[0][0]-df_2020.iloc[-1][0]
df_2021.iloc[0][3]=df_2021.iloc[0][1]-df_2020.iloc[-1][1]

startCreateDt='20220101'
endCreateDt='20220220'
url ='http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson'
url=url+'?serviceKey='+serviceKey+"&pageNo="+pageNo+"&numOfRows=" +numOfRows+ "&startCreateDt="+startCreateDt + "&endCreateDt=" + endCreateDt
req=requests.get(url).text
xmlObject=xmltodict.parse(req)
dict_data=xmlObject['response']['body']['items']['item']
d=pd.DataFrame(dict_data)
d = d.astype({'decideCnt' : 'int', 'deathCnt' : 'int'})
d = d.drop_duplicates(['stateDt']) #중복 일자 제거
d['날짜']=d['stateDt']
d['날짜'] = pd.to_datetime(d['날짜']) #날짜
d['날짜'] = d['날짜'].apply(lambda x:x.strftime('%m-%d'))
df_ = d[['날짜','decideCnt','deathCnt']]
df_ = df_.sort_values(by='날짜') #날짜정렬
df_['하루확진자'] = df_['decideCnt'].diff()
df_['하루사망자'] = df_['deathCnt'].diff()
df_=df_.fillna(0)
df_2022=df_.astype({'하루확진자' : 'int'})
df_2022=df_2022.astype({'하루사망자' : 'int'})
df_2022.columns=['날짜','확진자','사망자','하루확진자','하루사망자']
df_2022.index=df_2022['날짜']
df_2022=df_2022.drop('날짜',axis=1)
df_2022.iloc[0][2]=df_2022.iloc[0][0]-df_2021.iloc[-1][0]
df_2022.iloc[0][3]=df_2022.iloc[0][1]-df_2021.iloc[-1][1]

d2020=df_2020[['확진자','사망자','하루확진자','하루사망자']]
d2020.columns=['2020','2020','2020','2020']
dec2020=d2020.iloc[:, [0]]
dea2020=d2020.iloc[:, [1]]
dadec2020=d2020.iloc[:, [2]]
dadea2020=d2020.iloc[:, [3]]
dec2020

d2021=df_2021[['확진자','사망자','하루확진자','하루사망자']]
d2021.columns=['2021','2021','2021','2021']
dec2021=d2021.iloc[:, [0]]
dea2021=d2021.iloc[:, [1]]
dadec2021=d2021.iloc[:, [2]]
dadea2021=d2021.iloc[:, [3]]
dec2021

d2022=df_2022[['확진자','사망자','하루확진자','하루사망자']]
d2022.columns=['2022','2022','2022','2022']
dec2022=d2022.iloc[:, [0]]
dea2022=d2022.iloc[:, [1]]
dadec2022=d2022.iloc[:, [2]]
dadea2022=d2022.iloc[:, [3]]

dadec=pd.merge(dadec2020, dadec2021, left_index=True, right_index=True, how='outer')
dadec=pd.merge(dadec, dadec2022, left_index=True, right_index=True, how='outer')
dadec=dadec.fillna(0)
dadec=dadec.astype(int)
dadec

dec=pd.merge(dec2020, dec2021, left_index=True, right_index=True, how='outer')
dec=pd.merge(dec, dec2022, left_index=True, right_index=True, how='outer')
dec=dec.fillna(0)
dec=dec.astype(int)
dec

dea=pd.merge(dea2020, dea2021, left_index=True, right_index=True, how='outer')
dea=pd.merge(dea, dea2022, left_index=True, right_index=True, how='outer')
dea=dea.fillna(0)
dea=dea.astype(int)
dea

dadea=pd.merge(dadea2020, dadea2021, left_index=True, right_index=True, how='outer')
dadea=pd.merge(dadea, dadea2022, left_index=True, right_index=True, how='outer')
dadea=dadea.fillna(0)
dadea=dadea.astype(int)
dadea

"""#pyechart 부분"""

cate = ['하루 확진자','확진자', '하루 사망자','사망자',]
res=[dadec,dec,dadea,dea]
tab_COV1_COV2 = Tab()

# 하루 확진자
i=0
for x in res:
    attr = x.index.tolist()
    globals()['line_{}'.format(x)] = Line(init_opts=opts.InitOpts( theme=ThemeType.WESTEROS,
                    animation_opts=opts.AnimationOpts(
                        animation_delay=1000, animation_easing="elasticOut"
                    )))
    globals()['line_{}'.format(x)].add_xaxis(attr).set_global_opts(title_opts=opts.TitleOpts(title="하루 확진자",subtitle="커서와 스크롤을 조절해 원하는 정보를 확인해보세요!"),
                            yaxis_opts=opts.AxisOpts(min_='Datamin', name = "확진자 수",name_location="center",type_="value",is_scale=True),
                            xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=0)),
                    datazoom_opts=[opts.DataZoomOpts(), opts.DataZoomOpts(type_="inside")],
                    legend_opts=opts.LegendOpts(pos_left="40%",legend_icon='pin'),
                                    tooltip_opts=opts.TooltipOpts(trigger="axis", axis_pointer_type="cross")
                              ).set_series_opts(label_opts=opts.LabelOpts(is_show=False))

    for col in x.columns:
        globals()['line_{}'.format(x)].overlap(Line(init_opts=opts.InitOpts(theme=ThemeType.WESTEROS)).add_xaxis(attr).add_yaxis(col,x[col]))
    tab_COV1_COV2.add(globals()['line_{}'.format(x)], cate[i])
    i+=1

tab_COV1_COV2.render('covid19.html')

# # 하루 확진자
# attr = dadec.index.tolist()
# line_dadec = Line(init_opts=opts.InitOpts( theme=ThemeType.WESTEROS,
#                 animation_opts=opts.AnimationOpts(
#                     animation_delay=1000, animation_easing="elasticOut"
#                 )))
# line_dadec.add_xaxis(attr).set_global_opts(title_opts=opts.TitleOpts(title="하루 확진자",subtitle="커서와 스크롤을 조절해 원하는 정보를 확인해보세요!"),
#                          yaxis_opts=opts.AxisOpts(min_='Datamin', name = "확진자 수",name_location="center",type_="value",is_scale=True),
#                          xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=0)),
#                  datazoom_opts=[opts.DataZoomOpts(), opts.DataZoomOpts(type_="inside")],
#                  legend_opts=opts.LegendOpts(pos_left="40%",legend_icon='pin'),
#                                 tooltip_opts=opts.TooltipOpts(trigger="axis", axis_pointer_type="cross")
#                           ).set_series_opts(label_opts=opts.LabelOpts(is_show=False))

# for col in dadec.columns:
#     line_dadec.overlap(Line(init_opts=opts.InitOpts(theme=ThemeType.WESTEROS)).add_xaxis(attr).add_yaxis(col,dadec[col]))
# tab_COV1_COV2.add(line_dadec, cate[0])

# # 확진자
# attr = dec.index.tolist()
# line_dec = Line(init_opts=opts.InitOpts( theme=ThemeType.WESTEROS,
#                 animation_opts=opts.AnimationOpts(
#                     animation_delay=1000, animation_easing="elasticOut"
#                 )))
# line_dec.add_xaxis(attr).set_global_opts(title_opts=opts.TitleOpts(title="확진자",subtitle="커서와 스크롤을 조절해 원하는 정보를 확인해보세요!"),
#                          yaxis_opts=opts.AxisOpts(min_='Datamin', name = "확진자 수",name_location="center",type_="value",is_scale=True),
#                          xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=0)),
#                  datazoom_opts=[opts.DataZoomOpts(), opts.DataZoomOpts(type_="inside")],
#                  legend_opts=opts.LegendOpts(pos_left="40%",legend_icon='pin'),
#                                 tooltip_opts=opts.TooltipOpts(trigger="axis", axis_pointer_type="cross")
#                           ).set_series_opts(label_opts=opts.LabelOpts(is_show=False))

# for col in dec.columns:
#     line_dec.overlap(Line(init_opts=opts.InitOpts(theme=ThemeType.WESTEROS)).add_xaxis(attr).add_yaxis(col,dec[col]))
# tab_COV1_COV2.add(line_dec, cate[1])


# # 하루 사망자
# attr = dadea.index.tolist()
# line_dadea = Line(init_opts=opts.InitOpts( theme=ThemeType.WESTEROS,
#                 animation_opts=opts.AnimationOpts(
#                     animation_delay=1000, animation_easing="elasticOut"
#                 )))
# line_dadea.add_xaxis(attr).set_global_opts(title_opts=opts.TitleOpts(title="하루 사망자",subtitle="커서와 스크롤을 조절해 원하는 정보를 확인해보세요!"),
#                          yaxis_opts=opts.AxisOpts(min_='Datamin', name = "사망자 수",name_location="center",type_="value",is_scale=True),
#                          xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=0)),
#                  datazoom_opts=[opts.DataZoomOpts(), opts.DataZoomOpts(type_="inside")],
#                  legend_opts=opts.LegendOpts(pos_left="40%",legend_icon='pin'),
#                                 tooltip_opts=opts.TooltipOpts(trigger="axis", axis_pointer_type="cross")
#                           ).set_series_opts(label_opts=opts.LabelOpts(is_show=False))
# for col in dadea.columns:
#     line_dadea.overlap(Line(init_opts=opts.InitOpts(theme=ThemeType.WESTEROS)).add_xaxis(attr).add_yaxis(col,dadea[col]))
# tab_COV1_COV2.add(line_dadea, cate[2])

# # 사망자
# attr = dea.index.tolist()
# line_dea = Line(init_opts=opts.InitOpts( theme=ThemeType.WESTEROS,
#                 animation_opts=opts.AnimationOpts(
#                     animation_delay=1000, animation_easing="elasticOut"
#                 )))
# line_dea.add_xaxis(attr).set_global_opts(title_opts=opts.TitleOpts(title="사망자",subtitle="커서와 스크롤을 조절해 원하는 정보를 확인해보세요!"),
#                          yaxis_opts=opts.AxisOpts(min_='Datamin', name = "사망자 수",name_location="center",type_="value",is_scale=True),
#                          xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=0)),
#                  datazoom_opts=[opts.DataZoomOpts(), opts.DataZoomOpts(type_="inside")],
#                  legend_opts=opts.LegendOpts(pos_left="40%",legend_icon='pin'),
#                                 tooltip_opts=opts.TooltipOpts(trigger="axis", axis_pointer_type="cross")
#                           ).set_series_opts(label_opts=opts.LabelOpts(is_show=False))
# for col in dea.columns:
#     line_dea.overlap(Line(init_opts=opts.InitOpts(theme=ThemeType.WESTEROS)).add_xaxis(attr).add_yaxis(col,dea[col]))
# tab_COV1_COV2.add(line_dea, cate[3])
# tab_COV1_COV2.render('covid19.html')

