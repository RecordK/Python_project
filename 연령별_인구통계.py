# -*- coding: utf-8 -*-
"""연령별 인구통계

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DyWXYGVLIPPb5TK2dplZJvy_K69S9YBB

#한글적용
"""

# 코랩 한글 적용
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf
# 코랩 한글 적용 후 런타임 재시작
import matplotlib.pyplot as plt
plt.rc('font', family='NanumBarunGothic')
plt.rc('axes', unicode_minus=False)

"""#코드"""

!dir *.csv

!cp *.csv /content/drive/MyDrive/

import pandas as pd
filename='/content/drive/MyDrive/2021_age.csv'
j=pd.read_csv(filename,encoding='euc-kr',thousands=',')
j

j.info()

# 행정구역의 법정동코드와 시군구를 분리.index기준 가로 추가
j=j.join(
    j['행정구역'].str.split('(',expand=True)
)
j[1]=j[1].str.replace(')','')
j.head(1)

# 칼럼명 수정하기
j.rename({0:'시군구',1:'법정동코드'},axis=1,inplace=True)
# 독산동 인구 현황
# endswith
# startswith
독산=j[j['시군구'].str.contains('독산')]
독산=독산.drop('2021년12월_계_총인구수',axis=1)
독산=독산.drop('2021년12월_계_연령구간인구수',axis=1)

독산

독산제1동=j[j['시군구'].str.endswith('독산제1동')]
독산제1동=독산제1동.drop(['2021년12월_계_총인구수','2021년12월_계_연령구간인구수'],axis=1)
ad=독산제1동.drop(['행정구역','시군구','법정동코드'],axis=1)
# 추출
aad=독산제1동.loc[:,'2021년12월_계_0세':'2021년12월_계_100세 이상']
aad.T.plot()

ad.info()

# "2021년12월_계_0세" ~ "2021년12월_계_100세 이상" 추출
# 독산제1동.T
독산제1동.loc[ : , "2021년12월_계_0세":"2021년12월_계_100세 이상" ].T.plot(figsize=(16, 3))

# 독산제1동과 가장 비슷한 인구 분포를 가진 동을 찾으세요.
# 독산제1동의 연령별 인구수와 다른동의 연령별 인구수의 차이의 제곱의 합이 가장 작은 동을 찾기
# 1. 0세~ 10세이상만 추출
# 2. 독산제1동 추출
# 3. 다른동추출, 반복, 연령별 차이 제곱의 합 계산
# 4. 계산한 값의 최소값을 저장 

# 동별 0세~100세이상 칼럼만 추출
전체연령 = j.loc[ : , "2021년12월_계_0세":"2021년12월_계_100세 이상"]
전체연령.info()

독산제1동연령 = 독산제1동.loc[ :, "2021년12월_계_0세":"2021년12월_계_100세 이상"]
독산제1동연령

# # 전체연령의 모든 행을 반복
# for idx in 전체연령.index:
#   #idx번째 행 추출
#   # print(type(전체연령.loc[idx, :]))

독산제1동연령 - 전체연령.loc[2, :]

연령별차이제곱 = (독산제1동연령 - 전체연령.loc[2, :] )**2
연령별차이제곱 # DF

연령별차이제곱.loc[296].sum() # 연령별차이제곱의 전체합 -> 모든 행에 대해 계산, 최소값 찾기(반복문)

# 한줄로 계산
((독산제1동연령 - 전체연령.loc[2, :] )**2).loc[296].sum()

# 동별 0세~100세이상 칼럼만 추출
# 기준동 제외 조건
전체연령 = j.loc[ ~j["시군구"].str.endswith("독산제1동")  , "2021년12월_계_0세":"2021년12월_계_100세 이상"]
#전체연령의 index는 순차번호

최소연령별차이제곱의합 = 999999999999999
최소연령별차이제곱의합idx = -1

# 전체연령의 모든 행을 반복
for idx in 전체연령.index:
  #idx번째 행 추출
  연령별차이제곱의합 = ((독산제1동연령 - 전체연령.loc[idx, :] )**2).loc[296].sum() 
  if 연령별차이제곱의합 < 최소연령별차이제곱의합:
    최소연령별차이제곱의합 = 연령별차이제곱의합
    최소연령별차이제곱의합idx = idx

print("최소연령별차이제곱의합",최소연령별차이제곱의합)
print("최소연령별차이제곱의합idx",최소연령별차이제곱의합idx)
print("최소연령별차이의 동이름",j.loc[최소연령별차이제곱의합idx, "시군구"])

aad=독산제1동.loc[:,'2021년12월_계_0세':'2021년12월_계_100세 이상']
aad.T.plot()

j.loc[
      [296,1312],
      '2021년12월_계_0세':'2021년12월_계_100세 이상'].T.plot(figsize=(16,4))

j.loc[
      [296,1312],
      '2021년12월_계_0세':'2021년12월_계_100세 이상'].T.plot(figsize=(16,4))

# 독산제1동과 비슷한 10개동 검색
# 최소연령별차이제곱의합을 새로운 칼럼에 저장
# 최소연령별차이제곱의합을 리스트에 저장, 리스트를 칼럼에 저장

전체연령 = j.loc[ 
                 :  , 
                 "2021년12월_계_0세":"2021년12월_계_100세 이상" 
                 ]
#전체연령의 index는 순차번호

연령별차이제곱의합_리스트 = [] 

# 전체연령의 모든 행을 반복
for idx in 전체연령.index:
  #idx번째 행 추출
  연령별차이제곱의합 = ((독산제1동연령 - 전체연령.loc[idx, :] )**2).loc[296].sum() 
  연령별차이제곱의합_리스트.append( 연령별차이제곱의합 )

j["연령별차이제곱의합"] = 연령별차이제곱의합_리스트

j.set_index('시군구').sort_values(by="연령별차이제곱의합").head().loc[:,"2021년12월_계_0세":"2021년12월_계_100세 이상"].T.plot(figsize=(20,4))

j.set_index('시군구').sort_values(by="연령별차이제곱의합").tail().loc[:,"2021년12월_계_0세":"2021년12월_계_100세 이상"].T.plot(figsize=(20,4))

j['시군구'].str.strip().str.get(-1).unique()

j[j['시군구'].str.strip().str.count(' ')>=2]

j[
  j['시군구'].str.strip().str.count(' ')>=2
  ].set_index('시군구').sort_values(by="연령별차이제곱의합").tail().loc[
                                                            :,
                                                            "2021년12월_계_0세":"2021년12월_계_100세 이상"].T.plot(figsize=(20,4))

# 분산 그래프
import seaborn as sns
from scipy.stats import norm
# sns.FacetGrid(j, row = '행정구역').map(sns.distplot, 독산제1동.values)
sns.distplot(ad.values, fit=norm, kde=False)