# -*- coding: utf-8 -*-
"""집 값 예측 분석

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aL8zX__DxD5-tMBWG8LrTj-lKqVuX2Iu

# 처음 임포트
"""

# !pip install pandas
# !pip install numpy
# !pip install matplotlib
# !pip install seaborn
# !pip install sklearn

import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
# 1. train.csv : 학습 데이터
# id : 데이터 고유 id
# OverallQual : 전반적 재료와 마감 품질
# YearBuilt : 완공 연도
# YearRemodAdd : 리모델링 연도
# ExterQual : 외관 재료 품질
# BsmtQual : 지하실 높이
# TotalBsmtSF : 지하실 면적 
# 1stFlrSF : 1층 면적 
# GrLivArea : 지상층 생활 면적
# FullBath : 지상층 화장실 개수 
# KitchenQual : 부억 품질 
# GarageYrBlt : 차고 완공 연도
# GarageCars: 차고 자리 개수
# GarageArea: 차고 면적 
# target : 집값(달러 단위)

"""# 데이터 불러오기"""

data=pd.read_csv('/content/drive/MyDrive/집값예측분석/train.csv')
data.drop('id',axis=1,inplace=True)
data

"""# 데이터 결측치 확인"""

# 데이터를 가져온 뒤 결측치 확인은 필수다
def check(data):
    mcol = []
    for col in data.columns:
        mv = sum(data[col].isna())
        is_missing = True if mv >= 1 else False
        if is_missing:
            print(f'결측 {col}')
            print(f'{mv} 개')
            mcol.append([col, data[col].dtype])
    if mcol == []:
        print('x')
    return mcol
mcol = check(data)

"""#데이터 확인"""

#pd.set_option('display.max_columns', None) # 컬럼이 요약되지 않도록 설정합니다.
data # 데이터를 확인합니다.

data.info()

data.describe()

"""#수치형데이터 시각화"""

#수치형 데이터
numeric_feature = data.columns[(data.dtypes==int) | (data.dtypes== float)]
# 카테고리형 데이터
categorical_feature = data.columns[data.dtypes=='O']

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.style.use("ggplot")

feature = numeric_feature

# Boxplot 을 사용해서 데이터의 분포를 살펴봅니다.
plt.figure(figsize=(20,15))
plt.suptitle("Boxplots", fontsize=40)

for i in range(len(feature)):
    # 4행 3열 1~끝까지
    plt.subplot(4,3,i+1) # 수치형 데이터가 11개이므로 4*3=12개 자리가 필요합니다.
    # 그래프 제목 
    plt.title(feature[i])
    # 그래프그리기    
    plt.boxplot(data[feature[i]])
# 그래프출력  
plt.show()



"""#명목형 데이터 시각화"""

# 히스토그램 을 사용해서 데이터의 분포를 살펴봅니다.
feature = categorical_feature

plt.figure(figsize=(20,10))
plt.suptitle("Bar Plot", fontsize=40)

for i in range(len(feature)):
    # 1행 3열 1~끝
    plt.subplot(1,3,i+1)
    plt.title(feature[i], fontsize=20)
    temp = data[feature[i]].value_counts()
    plt.bar(temp.keys(), temp.values, width=0.5, color='b', alpha=0.5)
    plt.xticks(temp.keys(), fontsize=12)
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()
# 1. train.csv : 학습 데이터
# id : 데이터 고유 id
# OverallQual : 전반적 재료와 마감 품질
# YearBuilt : 완공 연도
# YearRemodAdd : 리모델링 연도
# ExterQual : 외관 재료 품질
# BsmtQual : 지하실 높이
# TotalBsmtSF : 지하실 면적 
# 1stFlrSF : 1층 면적 
# GrLivArea : 지상층 생활 면적
# FullBath : 지상층 화장실 개수 
# KitchenQual : 부억 품질 
# GarageYrBlt : 차고 완공 연도
# GarageCars: 차고 자리 개수
# GarageArea: 차고 면적 
# target : 집값(달러 단위)

# Ex Excellent
# Gd Good
# TA average/typical
# Fa Fair
# Po Poor

data

"""#상관관계 시각화"""

# 먼저 상관계수 계산을 위해 텍스트 형식의 데이터를 숫자로 변환해줌.
from sklearn.preprocessing import LabelEncoder

# 딥 복사
corr_df = data.copy()
corr_df[corr_df.columns[corr_df.dtypes=='O']] = corr_df[corr_df.columns[corr_df.dtypes=='O']].astype(str).apply(LabelEncoder().fit_transform)
corr_df['Exter Qual'].unique()
## 상관관계를 분석해보면 반비례적 요소가 많음 
#이 부분은 sklearn을 통해 제대로 된 수치화가 이루어지지 않았다고 생각함.
corr_df.info()

# 그래서 명목형 데이터들을  파악하고
data['Exter Qual'].unique()

data.info()

# 그  값들을  하나하나  바꿔줌  다행히  같은  척도로  계산이  되고  있어서  바꾸기가  쉬웠음
data2=data.copy() 
for i in data[data.columns[data.dtypes=='O']]:
  print(i)
  data2 = data2.replace({f'{i}' : {"Po":0, "Fa" : 1, "TA" : 2, "Gd" : 3, "Ex" : 4}})
data2.info()

#상관관계 분석도 이게 데이터 분석하는데에 제일 유용한 시각화가 아닌가 싶다
plt.figure(figsize=(15,10))

heat_table = corr_df.corr()
mask = np.zeros_like(heat_table)
mask[np.triu_indices_from(mask)] = True
heatmap_ax = sns.heatmap(heat_table, annot=True, mask = mask, cmap='coolwarm')
heatmap_ax.set_xticklabels(heatmap_ax.get_xticklabels(), fontsize=15, rotation=45)
 # 글자 기울이기 및 폰트사이즈 각도는 반시계 방향
heatmap_ax.set_yticklabels(heatmap_ax.get_yticklabels(), fontsize=15)
plt.title('correlation between features', fontsize=40)
plt.show()

plt.figure(figsize=(15,10))
heat_table2 =data2.corr()# 판다스 상관관계
# 삼각형 마스크를 만든다(위 쪽 삼각형에 True, 아래 삼각형에 False)
mask = np.zeros_like(heat_table2) #numpy heat_table과 shape동일한 0으로 채워진행렬
mask[np.triu_indices_from(mask)] = True
# heatmap
heatmap_ax = sns.heatmap(heat_table2, annot=True, mask = mask, cmap='coolwarm')
# x축 세팅
heatmap_ax.set_xticklabels(heatmap_ax.get_xticklabels(), fontsize=15, rotation=45)
 # 글자 기울이기 및 폰트사이즈 각도는 반시계 방향
# y축 세팅
heatmap_ax.set_yticklabels(heatmap_ax.get_yticklabels(), fontsize=15)
plt.title('correlation between features', fontsize=40)
plt.show()

# 1. train.csv : 학습 데이터
# id : 데이터 고유 id
# OverallQual : 전반적 재료와 마감 품질
# YearBuilt : 완공 연도
# YearRemodAdd : 리모델링 연도
# ExterQual : 외관 재료 품질
# BsmtQual : 지하실 높이
# TotalBsmtSF : 지하실 면적 
# 1stFlrSF : 1층 면적 
# GrLivArea : 지상층 생활 면적
# FullBath : 지상층 화장실 개수 
# KitchenQual : 부억 품질 
# GarageYrBlt : 차고 완공 연도
# GarageCars: 차고 자리 개수
# GarageArea: 차고 면적 
# target : 집값(달러 단위)

# Ex Excellent
# Gd Good
# TA average/typical
# Fa Fair
# Po Poor

# target과  높은  상관관계를  가지는  것들
heat_table.loc[:,'target'].sort_values().tail(7)

# target과  높은  상관관계를  가지는  것들
heat_table2.loc[:,'target'].sort_values().tail(7)

