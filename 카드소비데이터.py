# -*- coding: utf-8 -*-
"""카드소비데이터.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h_j6tED0ofp6QF2pjOEE900lATWZf_Yn
"""

import pandas as pd
# 한글깨짐 방지 코드
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf
import matplotlib.pyplot as plt
plt.rc('font', family='NanumBarunGothic')
plt.rc('axes', unicode_minus=False)

path = '/content/drive/MyDrive/카드 데이터/블록, 성별, 연령대별.csv'

name_sex = pd.read_csv(path, encoding="ksc5601", thousands=',')
name_sex.info()

"""# 업종별, 성별, 나이대별 분석"""

# 성별, 연령대별 카드 이용
name_sex.head()

name_sex['기준년월(YM)'].unique()

name_sex.isna().sum()

# 문자열 컬럼 기본 통계량 산출하기

name_sex.describe(include='object')

# 카드 소비 업종 코드 불러오기

path='/content/drive/MyDrive/카드 데이터/카드소비업종코드.csv'

code=pd.read_csv(path, encoding='ksc5601')
code.info()

code.describe(include='object')

# 성별, 연령대별 데이터에서 업종 코드 어떤거 있는지 확인하기

name_sex['서울시민업종코드(UPJONG_CD)'].unique()

name_sex.head()

# 컬럼값 이름 쉬운걸로 바꾸기
name_sex.rename({'서울시민업종코드(UPJONG_CD)':'업종코드',
                 '기준년월(YM)':'년월',
                 '성별(GEDNER)':'성별',
                 '연령대별(AGE)':'연령대별',
                 '카드이용금액계(AMT_CORR)':'카드이용금액'},
                axis=1, inplace=True)
name_sex.head()

# 필요없는 컬럼 없애기 ( 고객주소 블록코드 , 카드이용건수)

name_sex.drop(columns=['고객주소블록코드(BLOCK_CD)','카드이용건수계(USECT_CORR)'],
              inplace=True)
name_sex.head()

# 업종 코드 다시 확인하기

code.head().sort_values(by='업종코드(UPJONG_CD)')

# 업종코드 일괄적으로 대문자로 변경하기

code = code.applymap(str.upper)
code.head()

# 업종코드 기준 merge를 위해서 컬럼 이름 바꿔주기
code.rename({'업종코드(UPJONG_CD)':'업종코드',
             '대분류(CLASS1)':'대분류',
             '중분류(CLASS2)':'중분류',
             '소분류(CLASS3)':'소분류'},
            axis=1, inplace=True)

code.head()

# 업종코드를 기준으로 name_sex 데이터와 합치기

sex_age = name_sex.merge(code, on='업종코드')
sex_age

sex_age.info()

# sex_age 파일을 드라이브 폴더에 다시 저장하기

sex_age.to_csv('업종별_성별_나이별.csv', encoding='ksc5601')

sex_age.pivot_table(
    index='성별',
    values='카드이용금액',
    aggfunc='sum'
)



# 성별 총 카드이용금액 막대그래프로 나타내기
sex_age.pivot_table(
    index='성별',
    values='카드이용금액',
    aggfunc='sum'
).plot.bar()

sex_age.pivot_table(
    index='년월',
    values='카드이용금액',
    aggfunc='sum'
)

sex_age.pivot_table(
    index='년월',
    values='카드이용금액',
    aggfunc='sum'
).plot(figsize=(30,10))

sex_age['년월']=sex_age['년월'].astype(str)
sex_age['년']=sex_age['년월'].str[:4]
sex_age['월']=sex_age['년월'].str[4:]
sex_age.head()

# 시간 경과 추이에 따른 카드이용금액
sex_age.pivot_table(
    index='년월',
    values='카드이용금액',
    aggfunc='mean'
).plot(figsize=(15,5))

sex_age.info()

sex_age['년월']=sex_age['년월'].astype(int)

corona_sex_age = sex_age[sex_age['년월'] >= 201801]
corona_sex_age.sort_values(by='년월')

# 18년 부터 21년 까지의 이용금액 변화추이
corona_sex_age.pivot_table(
    index='년월',
    values='카드이용금액',
    aggfunc='mean'
).plot.bar(figsize=(15,10))

corona_sex_age.pivot_table(
    index='대분류',
    values='카드이용금액',
    aggfunc='sum'
)

corona_ind=corona_sex_age.pivot_table(
    index='대분류',
    values='카드이용금액',
    aggfunc='sum'
)
corona_ind

plt.pie(
    corona_ind['카드이용금액'],
    labels=corona_ind.index,
    autopct='%.1f%%',
    shadow=True
)

plt.show()

# 코로나 이전 데이터 추출(201902 전까지)
pre_corona = sex_age[(sex_age['년월'] <= 201902) & (sex_age['년월'] >= 201801)]
pre_corona.sort_values(by='년월')

# 코로나 이전 데이터 추출(201902 전까지)
post_corona = sex_age[sex_age['년월'] > 201902]
post_corona.sort_values(by='년월')

pre_industry=pre_corona.pivot_table(
    index='대분류',
    values='카드이용금액',
    aggfunc='sum'
)

pre_industry

post_industry=post_corona.pivot_table(
    index='대분류',
    values='카드이용금액',
    aggfunc='sum'
)

post_industry

# 코로나 이전 업종 비교분석
pre_industry_pie=plt.pie(
    pre_industry['카드이용금액'],
    labels=pre_industry.index,
    autopct='%.1f%%',
    shadow=True
)

plt.show()

# 코로나 이후 업종 비교분석
post_industry_pie=plt.pie(
    post_industry['카드이용금액'],
    labels=post_industry.index,
    autopct='%.1f%%',
    shadow=True
)

plt.show()

# 코로나 이전 연령에 따른 소비패턴

pre_corona.head()

# 코로나 이전 연령대별 업종에 따른 소비 패턴

pre_co_age=pre_corona.pivot_table(
    index='연령대별',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

# 코로나 이전 성별 업종에 따른 소비 패턴
pre_co_sex=pre_corona.pivot_table(
    index='성별',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

# 코로나 이전 연령대별 업종에 따른 소비 패턴 그래프

pre_co_age.plot.bar(figsize=(20,10))

# 코로나 이전 성별 업종에 따른 소비 패턴 그래프

pre_co_sex.plot.bar(figsize=(20,10))

# 코로나 이후 연령대별 업종에 따른 소비 패턴

post_co_age=post_corona.pivot_table(
    index='연령대별',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

# 코로나 이후 성별 업종에 따른 소비 패턴
post_co_sex=post_corona.pivot_table(
    index='성별',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

# 코로나 이후 연령대별 업종에 따른 소비 패턴 그래프

post_co_age.plot.bar(figsize=(20,10))

# 코로나 이후 연령대별 업종에 따른 소비 패턴 그래프

post_co_sex.plot.bar(figsize=(20,10))

"""# 지역별, 일별 분석"""

# 일별, 지역별 데이터 불러오기

path = '/content/drive/MyDrive/카드 데이터/집계구, 일별, 지역별.csv'

region = pd.read_csv(
    path,
    encoding='ksc5601'
)

region.info()

region.head()

# 컬럼값 이름 쉬운걸로 바꾸기
region.rename({'가맹점주소광역시도(SIDO)':'시도',
                 '가맹점주소시군구(SGG)':'구',
                 '업종대분류(UPJONG_CLASS1)':'대분류',
                 '기준일자(YMD)':'년월일',
                 '카드이용금액계(AMT_CORR)':'카드이용금액'},
                axis=1, inplace=True)
region.head()

region.drop(columns=['고객주소집계구별(TOT_REG_CD)','카드이용건수계(USECT_CORR)'
                     ], axis=1, inplace=True)

region.head()

# 결측치 확인

region.isna().sum()

# 업종코드와 데이터 결합

region_1 = code.merge(region, on='대분류')

region_1

# 년월일 칼럼 데이트타임으로 변환하기

region_1['년월일']=pd.to_datetime(
    region_1['년월일'],
    format='%Y%m%d'
)

region_1

region_1.info()

# 년월만 추출하여 컬럼에 넣기

region_1['년월'] = region_1['년월일'].apply(lambda x:x.strftime('%Y%m'))
region_1.head()

# 년도만 출력하여 칼럼에 넣기

region_1['년'] = region_1['년월일'].dt.year
region_1.head()

region_amount=region_1.pivot_table(
    index='시도',
    values='카드이용금액',
    aggfunc='sum'
).sort_values(by='카드이용금액', ascending=False)
region_amount

# 지역별 총이용금액 분석
region_amount_pie=plt.pie(
    region_amount['카드이용금액'],
    labels=region_amount.index,
    autopct='%.1f%%',
    shadow=True
)

plt.show()

# 시도별 연도별 카드총이용금액
region_year=region_1.pivot_table(
    index='시도',
    columns='년',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

region_year

region_year.plot(figsize=(15,5))

# 연도별 시도별 카드총이용금액
year_region=region_1.pivot_table(
    index='년',
    columns='시도',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

year_region.plot(figsize=(15,5))

# region_1에서 2018,2019,2020,2021 년 정보만 추출

region_2018=region_1[region_1['년']==2018]
region_2019=region_1[region_1['년']==2019]
pre_corona_region = region_2018.append(region_2019)

pre_corona_region

region_2020=region_1[region_1['년']==2020]
region_2021=region_1[region_1['년']==2021]
post_corona_region = region_2020.append(region_2021)

post_corona_region

region_2018.head()

# 2018년 시도별 업종별 카드총이용금액

r_2018_amount= region_2018.pivot_table(
    index='시도',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

r_2018_amount

r_2018_amount.plot.bar(figsize=(20,10))

# 코로나이전 시도별 업종별 카드총이용금액

pre_corona_rg_amt= pre_corona_region.pivot_table(
    index='시도',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

pre_corona_rg_amt

pre_corona_rg_amt.plot.bar(figsize=(20,10))

# 코로나이후 시도별 업종별 카드총이용금액

post_corona_rg_amt= post_corona_region.pivot_table(
    index='시도',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

post_corona_rg_amt

post_corona_rg_amt.plot.bar(figsize=(20,10))

# 2019년 시도별 업종별 카드총이용금액

r_2019_amount= region_2019.pivot_table(
    index='시도',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

r_2019_amount

r_2019_amount.plot.bar(figsize=(20,10))

# 2020년 시도별 업종별 카드총이용금액

r_2020_amount= region_2020.pivot_table(
    index='시도',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

r_2020_amount.plot.bar(figsize=(20,10))

# 2021년 시도별 업종별 카드총이용금액

r_2021_amount= region_2021.pivot_table(
    index='시도',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

r_2021_amount.plot.bar(figsize=(20,10))

# region_1 csv 파일로 저장하기

region_1.to_csv('지역별소비.csv',encoding='ksc5601')

region_1.head()

# 서울, 경기 데이터 추출
seoul=region_1[region_1['시도'] == '서울']
seoul

kygi = region_1[region_1['시도'] == '경기']
kygi

seoul_1=seoul.pivot_table(
    index='대분류',
    values='카드이용금액',
    aggfunc='sum'
)

seoul_1

seoul_pie = plt.pie(
    seoul_1['카드이용금액'],
    labels=seoul_1.index,
    autopct='%.1f%%',
    shadow=True
)

plt.show()

"""# 서울 연도별 업종별 소비 패턴"""

# 서울에서 2018,2019,2020,2021 년 정보만 추출

seoul_2018=seoul[seoul['년']==2018]
seoul_2019=seoul[seoul['년']==2019]
pre_corona_seoul=seoul_2018.append(seoul_2019)

seoul_2020=seoul[seoul['년']==2020]
seoul_2021=seoul[seoul['년']==2021]
post_corona_seoul=seoul_2020.append(seoul_2021)

pre_corona_seoul

# 서울 연도별 업종별 카드이용금액 추출

seoul_18=seoul_2018.pivot_table(
    index='대분류',
    values='카드이용금액',
    aggfunc='sum'
)

seoul_19=seoul_2019.pivot_table(
    index='대분류',
    values='카드이용금액',
    aggfunc='sum'
)

seoul_20=seoul_2020.pivot_table(
    index='대분류',
    values='카드이용금액',
    aggfunc='sum'
)

seoul_21=seoul_2021.pivot_table(
    index='대분류',
    values='카드이용금액',
    aggfunc='sum'
)

pre_seoul=pre_corona_seoul.pivot_table(
    index='대분류',
    values='카드이용금액',
    aggfunc='sum'
)

post_seoul=post_corona_seoul.pivot_table(
    index='대분류',
    values='카드이용금액',
    aggfunc='sum'
)

# 2018년 파이그래프
seoul_pie_2018 = plt.pie(
    seoul_18['카드이용금액'],
    labels=seoul_18.index,
    autopct='%.1f%%',
    shadow=True
)

plt.show()

# 2019년 파이그래프
seoul_pie_2019 = plt.pie(
    seoul_19['카드이용금액'],
    labels=seoul_19.index,
    autopct='%.1f%%',
    shadow=True
)

plt.show()

# 2020년 파이그래프
seoul_pie_2020 = plt.pie(
    seoul_20['카드이용금액'],
    labels=seoul_20.index,
    autopct='%.1f%%',
    shadow=True
)

plt.show()

# 2021년 파이그래프
seoul_pie_2021 = plt.pie(
    seoul_21['카드이용금액'],
    labels=seoul_21.index,
    autopct='%.1f%%',
    shadow=True
)

plt.show()

# 코로나이전 파이그래프
seoul_pie_pre = plt.pie(
    pre_seoul['카드이용금액'],
    labels=pre_seoul.index,
    autopct='%.1f%%',
    shadow=True
)

plt.show()

# 코로나이후 파이그래프
seoul_pie_post = plt.pie(
    post_seoul['카드이용금액'],
    labels=post_seoul.index,
    autopct='%.1f%%',
    shadow=True
)

plt.show()

"""# 일자별 요일별 시간대별 분석"""

path = '/content/drive/MyDrive/카드 데이터/집계구,일별,시간대별.csv'

time = pd.read_csv(path, encoding='ksc5601')

time.head()

time.info()

# 컬럼 이름 정리하기

time.rename({'업종대분류(UPJONG_CLASS1)':'대분류',
             '기준일자(YMD)':'년월일',
             '시간대구간(TIME)':'시간대구간',
             '고객주소집계구별(TOT_REG_CD)':'고객주소집계구별',
             '카드이용금액계(AMT_CORR)':'카드이용금액',
             '카드이용건수계(USECT_CORR)':'카드이용건수'},
            axis=1, inplace=True)

time.head()

# 사용하지 않는 컬럼 정리하기

time.drop(columns=['고객주소집계구별','카드이용건수'], axis=1, inplace=True)

time.head()

# 대분류 기준 업종코드랑 병합하기

time_1 = code.merge(time, on='대분류')

time_1

# 년월일 컬럼 datetime 으로 바꾸기

time_1['년월일']=pd.to_datetime(
    time_1['년월일'],
    format='%Y%m%d'
)

time_1.head()

# 년월만 출력해서 컬럼으로 지정하기
time_1['년월'] = time_1['년월일'].apply(lambda x:x.strftime('%Y%m'))
time_1.head()

#시간대구간 정보를 시간대 컬럼에 별도로 저장한다
# 1 : 00-04
# 2 : 04-08
# 3 : 08-12
# 4 : 12-16
# 5 : 16-20
# 6 : 20-24
time_1.loc[time_1['시간대구간'] == 1, '시간대(시)'] = '00-04'
time_1.loc[time_1['시간대구간'] == 2, '시간대(시)'] = '04-08'
time_1.loc[time_1['시간대구간'] == 3, '시간대(시)'] = '08-12'
time_1.loc[time_1['시간대구간'] == 4, '시간대(시)'] = '12-16'
time_1.loc[time_1['시간대구간'] == 5, '시간대(시)'] = '16-20'
time_1.loc[time_1['시간대구간'] == 6, '시간대(시)'] = '20-24'
time_1

# 요일 컬럼 생성
time_1['요일']=time_1['년월일'].dt.day_name()
time_1['년']=time_1['년월일'].dt.year

time_1

time_1['요일'].unique()

# 연도별 데이터 추출
time_2018=time_1[time_1['년']==2018]
time_2019=time_1[time_1['년']==2019]
time_2020=time_1[time_1['년']==2020]
time_2021=time_1[time_1['년']==2021]

# 코로나 전후 로 데이터 통합
# 전
pre_covid_time = time_2018.append(time_2019)
# 후
post_covid_time = time_2020.append(time_2021)

# 코로나 이전 시간대별 각 업종별 카드이용금액

pre_time_amt=pre_covid_time.pivot_table(
    index='시간대(시)',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

pre_time_amt

pre_time_amt.plot.bar(figsize=(20,10))

# 코로나 이후 시간대별 각 업종별 카드이용금액

post_time_amt=post_covid_time.pivot_table(
    index='시간대(시)',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0)

post_time_amt

post_time_amt.plot.bar(figsize=(20,10))

# 코로나 이전 요일별 각 업종별 총 카드이용금액

weeks=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']

pre_covid_day=pre_covid_time.pivot_table(
    index='요일',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0).reindex(weeks)

pre_covid_day

pre_covid_day.plot.bar(figsize=(20,10))

# 코로나 이후 요일별 각 업종별 총 카드이용금액

weeks=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']

post_covid_day=post_covid_time.pivot_table(
    index='요일',
    columns='대분류',
    values='카드이용금액',
    aggfunc='sum'
).fillna(0).reindex(weeks)

post_covid_day

post_covid_day.plot.bar(figsize=(20,10))

"""# 반응형 차트 구현하기"""

from google.colab import output
!pip install chart_studio
!pip install pyecharts
!pip install echarts-themes-pypkg
output.clear()

import pandas as pd
from pandas import Series
import numpy as np
from datetime import date

import copy, json
import chart_studio
chart_studio.tools.set_credentials_file(username='username', api_key='api_key')

from IPython.display import IFrame
import chart_studio.plotly as py
import plotly.express as px
import plotly.offline as pyo
import plotly.graph_objs as go
import plotly.graph_objects as go
import plotly.io as pio

from pyecharts.globals import ThemeType
from pyecharts.commons.utils import JsCode
from pyecharts.charts import Bar, Bar3D, Grid, Line, Liquid, Page, Pie, Timeline, Tab, Map, Grid
from pyecharts import options as opts

import folium, webbrowser, IPython, warnings
warnings.filterwarnings('ignore')

from pyecharts.globals import CurrentConfig, NotebookType
CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_LAB

pre_seoul.head()

pre_seoul.rename({'코로나 이후 소비금액':'코로나 이전 소비금액'}, axis=1, inplace=True)

pre_seoul.head()

post_seoul.rename({'카드이용금액':'코로나 이후 소비금액'}, axis=1, inplace=True)

post_seoul.head()

# 파이차트
corona_industry_tab = Tab()

pre_total = (Pie(init_opts=opts.InitOpts(theme=ThemeType.WESTEROS)).add('', [list(z) for z in zip(pre_seoul.index.tolist(),
                                                 pre_seoul.values.tolist())],
                       label_opts=opts.LabelOpts(position='outside', formatter="{b}\n{d}%"),
                       rosetype="radius",radius=["30%", "60%"])
                       .set_global_opts(title_opts=opts.TitleOpts(title='코로나 이전 업종별 카드소비',
                                                                  subtitle='마우스를 파이에 올려 소비금액을 확인해보세요!'),
                                        legend_opts=opts.LegendOpts(type_ = 'scroll', pos_bottom ="60%",pos_right="-3%", orient="vertical",legend_icon ='pin')))

post_total = (Pie(init_opts=opts.InitOpts(theme=ThemeType.WESTEROS)).add('', [list(z) for z in zip(post_seoul.index.tolist(),
                                                 post_seoul.values.tolist())],
                       label_opts=opts.LabelOpts(position='outside', formatter="{b}\n{d}%"),
                       rosetype="radius",radius=["30%", "60%"])
                       .set_global_opts(title_opts=opts.TitleOpts(title='코로나 이후 업종별 카드소비',
                                                                  subtitle='마우스를 파이에 올려 소비금액을 확인해보세요!'),
                                        legend_opts=opts.LegendOpts(type_ = 'scroll', pos_bottom ="60%",pos_right="-3%", orient="vertical",legend_icon ='pin')))

    

corona_industry_tab.add(pre_total,'코로나 이전 업종별 카드소비')
corona_industry_tab.add(post_total,'코로나 이후 업종별 카드소비')

corona_industry_tab.render('corona_total_in.html')

corona_industry = pre_seoul.merge(post_seoul,on='대분류')

corona_industry

seoul

seoul

years=[2016,2017,2018,2019,2020,2021]
seoul_2=seoul.pivot_table(
    index=['년','대분류'],
    values='카드이용금액',
    aggfunc='sum'
).fillna(0).T

seoul_2

# 2016년
s_2=seoul_2[2016].T
s_2.rename({'카드이용금액':'2016'},axis=1,inplace=True)
s_2=s_2.T
s_2016=s_2.reset_index()
s_2016.rename({'index':'년'},axis=1,inplace=True)
s_2016

# 2017년
s_4=seoul_2[2017].T
s_4.rename({'카드이용금액':'2017'},axis=1,inplace=True)
s_4=s_4.T
s_2017=s_4.reset_index()
s_2017.rename({'index':'년'},axis=1,inplace=True)
print(s_2017)

# 2018년
s_5=seoul_2[2018].T
s_5.rename({'카드이용금액':'2018'},axis=1,inplace=True)
s_5=s_5.T
s_2018=s_5.reset_index()
s_2018.rename({'index':'년'},axis=1,inplace=True)
print(s_2018)

# 2019년
s_6=seoul_2[2019].T
s_6.rename({'카드이용금액':'2019'},axis=1,inplace=True)
s_6=s_6.T
s_2019=s_6.reset_index()
s_2019.rename({'index':'년'},axis=1,inplace=True)
print(s_2019)

# 2020년
s_7=seoul_2[2020].T
s_7.rename({'카드이용금액':'2020'},axis=1,inplace=True)
s_7=s_7.T
s_2020=s_7.reset_index()
s_2020.rename({'index':'년'},axis=1,inplace=True)
print(s_2020)

# 2021년
s_8=seoul_2[2021].T
s_8.rename({'카드이용금액':'2021'},axis=1,inplace=True)
s_8=s_8.T
s_2021=s_8.reset_index()
s_2021.rename({'index':'년'},axis=1,inplace=True)
print(s_2021)

s1=s_2016.append(s_2017)
s2=s1.append(s_2018)
s3=s2.append(s_2019)
s4=s3.append(s_2020)
s_total=s4.append(s_2021)

s_total=s_total.fillna(0)

s_total

corona_industry_percent = Timeline(
    init_opts=opts.InitOpts(
        theme=ThemeType.WESTEROS, 
        height='400px',
        width='600px')
).add_schema(is_auto_play=True)
for s in s_total['년'].unique():
    a=s_total[s_total['년']==s].loc[:,'가전/가구':'교육/학원'].values.tolist()
    b=a[0]
    c=[[i] for i in b]
    corona_industry_percent.add((Pie(init_opts=opts.InitOpts(theme=ThemeType.WESTEROS)).add("", [list(z) for z in zip(s_total.columns[1:], c)],
                    rosetype="radius",radius=["30%", "60%"]))
    .set_series_opts(label_opts=opts.LabelOpts(is_show=True,position='top'))
    .set_global_opts(title_opts=opts.TitleOpts(title="연도별 카드소비액", subtitle="마우스를 파이에 올려 소유자수 비율을 확인해보세요!"),
                     legend_opts=opts.LegendOpts(type_ = 'scroll', pos_bottom ="60%",pos_right="-3%", orient="vertical",legend_icon ='pin'))
  ,"{}년도".format(s))
    
    corona_industry_percent.render('corona_ind_total.html')

s_total

